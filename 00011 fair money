Here are the SQL queries for the given questions:


---

Q1: Create a Table with Total Outstanding Balance for Each Day

Query:

WITH daily_balance AS (
    SELECT 
        p1.payment_timestamp::DATE AS date,
        l.user_id,
        l.loan_id,
        l.total_amount_disbursed,
        COALESCE(
            SUM(CASE WHEN p2.type = 'disbursement' THEN p2.amount ELSE 0 END) 
            - SUM(CASE WHEN p2.type = 'repayment' THEN p2.amount ELSE 0 END), 
        0) AS total_outstanding_amount,
        (SELECT MAX(payment_timestamp::DATE) 
         FROM PAYMENTS p3 
         WHERE p3.loan_id = l.loan_id AND p3.type = 'repayment') AS latest_repayment_date
    FROM LOANS l
    LEFT JOIN PAYMENTS p1 ON l.loan_id = p1.loan_id
    LEFT JOIN PAYMENTS p2 ON l.loan_id = p2.loan_id
    WHERE p1.type IN ('disbursement', 'repayment')
    GROUP BY date, l.user_id, l.loan_id, l.total_amount_disbursed
)
SELECT * FROM daily_balance
ORDER BY date, user_id, loan_id;


---

Q2: Generate Priority List for Collection Recovery

Query:

WITH overdue_users AS (
    SELECT 
        user_id,
        loan_id,
        CURRENT_DATE - latest_repayment_date AS last_paid_before_n_days,
        total_amount_disbursed,
        total_outstanding_amount
    FROM (
        SELECT 
            l.user_id,
            l.loan_id,
            l.total_amount_disbursed,
            (SELECT SUM(CASE WHEN p.type = 'disbursement' THEN p.amount ELSE 0 END)
             FROM PAYMENTS p WHERE p.loan_id = l.loan_id) 
            - (SELECT COALESCE(SUM(p.amount), 0) 
               FROM PAYMENTS p WHERE p.loan_id = l.loan_id AND p.type = 'repayment') 
            AS total_outstanding_amount,
            (SELECT MAX(payment_timestamp::DATE) 
             FROM PAYMENTS p WHERE p.loan_id = l.loan_id AND p.type = 'repayment') 
            AS latest_repayment_date
        FROM LOANS l
    ) subquery
    WHERE (CURRENT_DATE - latest_repayment_date) > 30
      AND (total_outstanding_amount >= 0.7 * total_amount_disbursed 
           OR total_outstanding_amount >= 10000)
)
SELECT user_id, loan_id, last_paid_before_n_days, total_amount_disbursed, 
       total_outstanding_amount, 
       RANK() OVER (ORDER BY total_outstanding_amount DESC) AS rank
FROM overdue_users
LIMIT 1000;


---

These queries:

1. Q1 Query: Generates a table showing the daily total outstanding balance for each user-loan combination.


2. Q2 Query: Extracts users who are overdue for more than 30 days and meet the balance criteria, ranking them in descending order.



Let me know if any modifications are required!

